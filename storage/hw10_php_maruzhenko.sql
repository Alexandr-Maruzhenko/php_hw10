-- phpMyAdmin SQL Dump
-- version 5.1.1
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Мар 10 2022 г., 15:03
-- Версия сервера: 5.7.33
-- Версия PHP: 7.4.27

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `hw10_php_maruzhenko`
--

-- --------------------------------------------------------

--
-- Структура таблицы `authors`
--

CREATE TABLE `authors` (
  `id` int(11) NOT NULL,
  `name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `authors`
--

INSERT INTO `authors` (`id`, `name`) VALUES
(1, 'Александр Маруженко');

-- --------------------------------------------------------

--
-- Структура таблицы `categories`
--

CREATE TABLE `categories` (
  `id` int(11) NOT NULL,
  `name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `categories`
--

INSERT INTO `categories` (`id`, `name`, `code`) VALUES
(1, 'Справочник PHP', 'php_reference');

-- --------------------------------------------------------

--
-- Структура таблицы `posts`
--

CREATE TABLE `posts` (
  `id` int(11) NOT NULL,
  `active` tinyint(1) NOT NULL,
  `title` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `category_id` int(11) NOT NULL,
  `autor_id` int(11) NOT NULL,
  `date` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `posts`
--

INSERT INTO `posts` (`id`, `active`, `title`, `code`, `content`, `category_id`, `autor_id`, `date`) VALUES
(1, 1, 'PHP - Корень сайта', 'php_site_root', 'PHP - Корень сайта\r\nПолучить корневую папку сайта в скрипте php можно используя предопределённый (глобальный) массив $_SERVER:\r\n\r\n$_SERVER[\'DOCUMENT_ROOT\']\r\n\r\nЧтобы посмотреть путь к корневому каталогу достаточно создать любой php файл и поместить в него следующее содержимое:\r\n\r\necho $_SERVER[\'DOCUMENT_ROOT\'];\r\n\r\nАбсолютный путь обычно применяют тогда, когда вы не знаете местоположение файлов относительно скрипта, в котором вы их используете.\r\n', 1, 1, '2022-03-06 22:20:13'),
(2, 1, 'Знакомство с WinBinder', 'post2', 'Язык PHP очень функционален, огромную роль на себя берут подключаемые к интерпретатору библиотеки с различными функциями. Сегодня PHP благодаря подключаемым библиотекам может обрабатывать самые популярные форматы файлов, работать с известными протоколами и многое другое.\r\n\r\nНе так давно на свет появилась еще одна не менее полезная библиотека - WinBinder. Она позволяет создавать GUI-приложения для Windows на языке PHP. Грубо говоря, WinBinder - библиотека и набор скриптов с необходимыми функциями.\r\n\r\nВзять дистрибутив можно здесь: http://winbinder.org/download.php. Для начала лучше скачать набор, приготовленный разработчиками, а потом, при желании, подключить к нему другие библиотеки. Текущая версия - 0.46.0 (alpha). Обратите внимание, пока только альфа версия, но проект активно развивается.\r\n\r\nПри установке можно выбрать, какую версию PHP использовать - 4, 5 или 5.1. Если выбрать 5 или 5.1, то инсталлятор сам скачает библиотеки для этих версий, но только библиотеки. Я выбрал 4 и 5, в принципе можно обойтись только четверкой, но, помнется, в прошлых версиях была проблема невозможности работать с MySQL, которая решалась обновлением PHP до 5-ой версии.\r\n\r\nВ комплект входит интерпретатор PHP с библиотеками GD2, SQLite, FreeImage и WinBinder, документация на английском языке, несколько скриптов с различными функциями и большое количество примеров. Исполняемые файлы имеют расширение PHPW и представляют собой обычные текстовые файлы, которые можно просмотреть любым текстовым редактором. Рекомендую так же настроить любимый редактор на подсветку таких файлов, так же как и файлов PHP.\r\n\r\nЕсли вы хотите использовать PHP 5-ой версии, то должны скачать архив с минимальным набором PHP 5 (php50_minimal.zip) с той же страницы что и сам WinBinder. Этот архив нужно распаковать в папку binaries\\php50 и скопировать файл php.ini из папки php4 в php50 и убрать из него строки extension=php_gd2.dll и extension=php_sqlite.dll. Затем нужно ассоциировать файлы *.phpw с приложением php-win.exe в папке php50.\r\n\r\nНадо заметить, что приложения, написанные с использованием библиотеки WinBinder, получаются очень маленькими, по сравнению с полноценными языками программирования, которые специально придуманы для системного программирования. Это объясняется тем, что это всего лишь скрипты, и они не могут работать без своего интерпретатора.\r\n\r\nРазумеется, в настоящее время создавать серьезные проекты на биндере не стоит, но для создания простых утилит для личного использования он просто не заменим, разумеется, если вы знакомы с языком PHP.', 1, 1, '2022-03-10 14:45:21'),
(3, 1, 'Проектирование Интернет-приложений', 'post3', 'Первым этапом создания любого программного продукта является постановка задачи. Имея точно сформулированные цели и задачи, можно приступать к проектированию структуры базы данных и всего приложения в целом. Разработку приложения можно начинать, только имея готовый проект, иначе вся работа грозит закончиться неудачей и потерей драгоценного времени.\r\n\r\nПостановка задачи\r\n\r\n    Наш заказчик -- директор небольшого книжного магазина специализированной литературы. Постоянные покупатели время от времени звонят в магазин, чтобы узнать о наличии той или иной конкретной книги или книг по какой-либо тематике. Нередко люди просят привезти им книгу на дом или на работу, поэтому руководство книжного магазина решило пойти им навстречу и создать специальную службу заказа и доставки книг покупателям. Из всех возможных вариантов сеть Интернет оказалась идеальным вариантом для реализации проекта, так как большая часть покупателей имела отношение к компьютерам и постоянно пользовалась услугами Сети, а анализ стоимости создания и эксплуатации службы заказа показал, что проект на основе сети Интернет потребует намного меньше капиталовложений, чем альтернативные варианты.\r\n    После долгой беседы с заказчиком был составлен необходимый минимум свойств и требований, предъявляемых к будущему приложению. Приложение должно:\r\n\r\nпоказывать потенциальному покупателю информацию о товаре (книгах);\r\nпредставлять описания и свойства товара в структурированных категориях;\r\nиметь возможность быстрого и относительно простого обновления внешнего вида сайта;\r\nиспользовать внутреннюю банерную систему, использующую несколько популярных форматов банеров, в том числе и из внешних источников (банерных сетей);\r\nпозволять пользователю производить поиск товаров в названиях и описаниях товаров путем задания ключевых слов;\r\nавтоматизировать систему приема заказов, отправлять уведомления о заказе покупателю и владельцу Интернет-магазина;\r\nобеспечить конфиденциальность информации о покупателях и заказах;\r\nуправлять работой Интернет-магазина через web-браузер.\r\n    Доставку товара заказчик собирается производить с помощью одной из курьерских фирм города и только в пределах города, в котором располагается его магазин. Книжный магазин и курьерская служба заключили предварительное соглашение о том, что стоимость доставки будет составлять 2% от суммы заказа или не менее $1, если сумма заказа меньше $1. Возможность торговли по всему миру требует больших дополнительных расходов на организацию бизнеса и нашего заказчика не интересует.\r\n    Заказчик поставил несколько дополнительных условий:\r\n\r\nочень важны минимальные вложения средств в этот проект;\r\nпервоначально размещать проект предполагается в одной из популярных служб, оплатив недорогой виртуальный сервер на платформе Linux. При успешном развитии проекта, когда он начнет приносить прибыль, площадку необходимо будет сменить, и для того, чтобы не было проблем переноса с одного сервера на другой, приложение должно быть мобильным и, по мере возможности, платформо-независимым.\r\n    С учетом всех этих условий для организации Интернет-магазина был выбран популярный язык программирования Perl и база данных MySQL. Оба эти продукта поддерживают лицензию GNU, что снижает затраты на внедрение, кроме того, наличие исходных кодов этих продуктов позволяет не зависеть от конкретной фирмы-разработчика. Версии этих продуктов существуют для большинства операционных систем и поддерживаются практически всеми площадками, предоставляющими услуги по размещению сайтов.\r\n    Сайт вводится в действие поэтапно. Первоначально создается Интернет-каталог, после чего к нему добавляется функциональность Интернет-магазина. И, наконец, третьей ступенью является подключение к платежным системам.\r\n    Интернет-каталог включает в себя следующие возможности:\r\n\r\nпредоставление потенциальному покупателю информации о товаре (книгах);\r\nпредставление описаний и свойств товара в структурированных категориях;\r\nвозможность быстрого и относительно простого обновления внешнего вида сайта;\r\nиспользование внутренней банерной системы, поддерживающей несколько популярных форматов банеров, в том числе и из внешних источников (банерных сетей);\r\nпредоставление пользователю возможности производить поиск товаров в тексте названий и описаний товаров путем задания ключевых слов;\r\nуправление работой Интернет-магазина через web-браузер.\r\n    После завершения разработки Интернет-каталога и принятия его заказчиком необходимо добавить возможности Интернет-магазина, а именно:\r\n\r\nавтоматизировать систему приема заказов, организовать отправление уведомления о заказе покупателю и владельцу Интернет-магазина;\r\nобеспечить конфиденциальность информации о покупателях и заказах;\r\nобеспечить возможность управления работой Интернет-магазина через web-браузер.\r\n    На последнем этапе, по желанию заказчика, созданный Интернет-магазин подключается к одной или нескольким платежным системам для оплаты товара по платежным картам. До этого момента заказы принимаются, но оплата их производится только наличными курьеру.\r\n\r\nПодключение к платежной системе во многом зависит от специфики конкретной платежной системы, этот вопрос выходит за рамки книги и рассматриваться не будет. Для организации платежей через Интернет обращайтесь к службе поддержки выбранной вами платежной системы.\r\n\r\nПроектирование Интернет-магазина\r\n\r\n    Приступая к разработке сайта, частью которого является Интернет-магазин (или Интернет-каталог), необходимо четко представлять структуру навигации и информационного наполнения. Это позволит определить структуру Интернет-приложения и используемые технологии. Как и для большинства приложений, необходимо составить соглашения о присвоении имен.\r\n\r\nКарта Интернет-магазина\r\n\r\n    Для четкого представления структуры создаваемого Интернет-приложения строится навигационная карта с указанием всех возможных страниц, на основании которой в дальнейшем будет разрабатываться приложение.\r\n    Как уже отмечалось выше, сайт вводится в действие поэтапно. Первоначально создается Интернет-каталог, после чего к нему добавляется недостающая функциональность Интернет-магазина. Навигационная карта должна быть составлена для выполнения каждого из этапов разработки.\r\n    Навигационная карта Интернет-каталога книжного магазина представлена на рис. 1.1.\r\n    С главной страницы Интернет-каталога пользователь переходит на страницы каталога, в котором представлен список книг и их краткое описание, указаны ссылки на информацию об авторе, написавшем книгу, и издательстве, ее выпустившем. Информация об авторе состоит из краткой биографической справки и списка книг этого автора, представленных в Интернет-каталоге. Аналогично, страница с информацией об издательстве содержит описание издательства и список книг, выпущенных им и продаваемых в Интернет-каталоге.', 1, 1, '2022-03-10 14:50:00'),
(4, 1, 'Интервью Расмуса Лердорфа для SitePoint', 'post4', 'Кевин Янк (Kevin Yank): Недавно участники форумов сообщества SitePoint собрались вместе и сформулировали подборку вопросов к создателю PHP, Расмусу Лердорфу. Я был доволен, когда прочитал его ответы и узнал, что человек, который изначально запустил в движение механизм PHP, видит безоблачным то, что происходит с движением open source. Перевод Дмитрия Лебедева (detail)\r\n\r\nОн спешит преуменьшить свой вклад в то, чем является PHP сегодня, и приписывает основную долю успеха PHP большому сообществу разработчиков, за годы оставивших свой след в проекте. То есть Расмус сегодня — просто самый большой фанат PHP.\r\n\r\nНо хватит с меня, давайте послушаем, что говорил Расмус.\r\n\r\nВ начале...\r\n\r\nSP: Каким был ваш первый контакт с движением Open Source и что в нём такого, на что вы \"подсели\"?\r\n\r\nRL: Тогда в начале и середине 90-х термин \"Open Source\" не существовал.\r\n\r\nСуществовало \"бесплатное программное обеспечение\", конечно же, и я игрался с Линуксом с самого первого релиза в 1991 году. До этого я использовал QNX и Xenix и начал играться с Minix пока меня не выручил Линукс.\r\n\r\nНе думаю, что когда либо я пристращался к \"движению\". Когда у вас нет денег, чтобы купить Юникс, и вы можете скачать что-то, что работает, и даже найти людей, которые могут вам помочь поставить это и запустить, как можно обойти это? Культ никогда не играл роли.\r\n\r\nSL: Что заставило вас разработать PHP? И что по вашему мнению этот язык может предложить, чего нет в других?\r\n\r\nRL: Первая версия PHP была простым набором инструментов, которые я выложил вместе на мой сайт для пары проектов. Один инструмент делал высшего качества логи в базу данных mSQL, другой работал как обработчик форм. Я закончил на 30 разных маленьких CGI-программ написанных на C, когда устал от этого и соединил их в одну библиотеку на C. Затем я написал очень простой парсер, который бы брал теги из HTML-файлов и заменял их на вывод соответствующих функций в библиотеке.\r\n\r\nПростой парсер медленно вырос до включения условных тегов, затем циклов, функций и так далее. Я никогда не думал, что пишу язык сценариев. Я просто добавлял немного функциональности в парсер, заменяющий макросы. Я по-прежнему писал всю свою логику для реального бизнеса на C.\r\n\r\nНаконец, что на мой взгляд выделило PHP в те ранние дни и до сих пор — это то, что он [PHP] всегда пытается найти кратчайший путь в решении проблемы веба. Он не пытается стать языком сценариев общего назначения, и любой, кто ищет решения проблем интернета, найдёт прямое решение при помощи PHP. Многие альтернативы, которые претендуют на решение проблем интернета, просто слишком сложны. Когда вам нужно что-то установленное и работающее к пятнице, чтобы не надо было тратить все выходные листая восьмисотстраничные мануалы, PHP начинает выглядеть довольно хорошо.\r\n\r\nSP: Если посмотреть на цифры, сейчас более 9 миллионов доменов используют PHP. Вы когда-нибудь думали, что PHP станет таким большим? Каково чувствовать, что ваш продукт — возможно, самая лучшая альтернатива решениям Майкрософта для веба?\r\n\r\nRL: Во-первых, пусть будет ясно, что я не разрабатывал PHP, который мы знаем сегодня. Десятки, если не сотни людей разрабатывали PHP. Я был просто первым разработчиком.\r\n\r\nPHP — в значительной степени совместный проект. Подумайте так: у вас есть проблема связанная с вебом. Вы можете либо пойти в магазин и купить дорогой продукт в целлофане, который может или не может решить большинство ваших проблем. Либо вы собираетесь вместе с некоторыми из тысяч людей, у которых есть точно такая же проблема, как и у вас, и вырабатываете решение, которое работает на всех из вас.\r\n\r\nВы не только получите решение, направленное именно на вашу проблему, вы также станете частью одинаково мыслящего сообщества, где идеи и опыт распространяются свободно. Это превосходит любой коммерческий продукт, который можно купить в магазине, и по мне это лучший способ разработки такого рода софта.\r\n\r\nПоэтому когда люди спрашивают меня, каково чувствовать себя разработавшим что-то, что используют миллионы людей, это не соответствует моему взгляду на вещи. Наконец, я просто первый член сообщества, которое возникло вокруг одного подхода к решению проблем веба.\r\n\r\nSP: Кого бы вы назвали своим героем? Какие люди из или извне IT воодушевляли вас?\r\n\r\nRL: На самом деле, люди меня не воодушевляют в метафизическом смысле. Но я определённо ценю и уважаю превосходные решения сложных проблем.\r\n\r\nSP: Как вы думаете, какое самое важное решение за годы разработок PHP вы приняли? Есть ли решения, которые в приняли и которые сейчас хотелось бы сделать по-другому?\r\n\r\nRL: Сложно просить меня предугадать решения, которые были сделаны 6 или 7 лет назад, когда PHP использовался в общей сумме одним человеком. Не забывайте, что я не брался написать язык сценариев, который бы использовался на 9 миллионах доменов, я брался за решение проблем. Решение проблемы до 5 вечера, чтобы потом вы могли пойти в кино с подругой ведёт к тем перспективам, которые не идеальны 7 лет спустя, когда тысячам людей приходится работать над добавленной вами ночной писаниной.\r\n\r\nСамое правильное решение, которое я принял за всё время было, возможно, отменить контроль. Открыть проект и дать любому, кто попросит, полный доступ к исходникам PHP. Это привело множество очень талантливых людей. Проект PHP, возможно, самый большой, если считать по количеству людей, которым вверяют доступ к CVS-репозитарию, где живёт код и документация.\r\n\r\nДвижение Open Source\r\n\r\nSP: Движение Open Source всё ещё представляется многими, как \"анархистское\" и своего рода \"опасностью для общества\". Чувствуете ли вы, что оно когда-нибудь добьётся принятия мейнстримом? Если да, то как сообщество Open Source будет с этим поступать?\r\n\r\nRL: Я полагаю, у этого вопроса есть две части.\r\n\r\nКак и мейнстрим, продукт этого \"движения\" — определённо является мейнстримом. \"Движение\" построило интернет таким, каким мы его сегодня знаем. Оно построило стек TCP/IP, используемые в большинстве операционных систем (да, даже в Windows). Оно не только создало самый популярный веб-сервер в мире (имеется в виду Apache — прим. переводчика), но и системы DNS и MTA, которыми интернет и живёт. И если вы оглянетесь немного назад, вы поймете, что OpenSource сегодня это целая отрасль разработки программ. Все первые операционные системы были с открытым исходным кодом, потому что это был единственный разумный способ работать. Вы не могли продать кому-нибудь большой мейнфрейм без предоставления исходников мозга этой вещи. Только позднее была представлена концепция непредоставления исходного кода.\r\n\r\nНо я полагаю, ваш реальный вопрос — что я думаю о попытках Майкрософта убедить мир, что большие группы людей, сотрудничающих, чтобы решать проблемы, как-то угрожают самой структуре общества, в котором мы живём. И я не думаю, что есть \"много\" людей, заявляющих это, поскольку это полная чепуха — я бы хотел считать мир хорошим местом, не наполненным людьми, которые распространяют такую нелепую идею. Давайте положим конец всем встречам больших групп людей, если на то пошло. Они могут быть злыми анархистами, которые разрушат мир.\r\n\r\nВ конце концов, принятие мейнстримом — не цель. Цель для большинства людей, которые работают над бесплатным софтом и opensource-проектами — сама технология. Это построение инструмента, который решает проблему. Это не идеология для большинства из нас, и поэтому принятие мейнстримом включает в себя лишь общепринятое использование технологии. На многих направлениях это было достигнуто, на многих это ещё впереди.\r\n\r\nSP: PHP уделяется очень мало внимания со стороны мейнстрима IT-прессы. Чувствуете ли вы, что PHP нарочно игнорируется вне кругов Open Source?\r\n\r\nRL: PHP — не очень захватывающая вещь. Это тонкий слой клея между веб-сервером и разными вещами, с которыми вам хочется, чтобы ваш сервер говорил.\r\n\r\nПо старой традиции Юникса мы полагаемся на маленькие специализированные добавочные библиотеки для подъёма всех тяжёлых действий с как можно меньшим вмешательством со стороны PHP. И ASP, и JSP, и Cold Fusion имеют большие компании с большими рекламными бюджетами за спиной и сами продукты становятся больше и сложнее с каждым релизом, чтобы покупатели чувствовали, что они стоят таких денег. Кто выложит 10 000 долларов за дискету и двухстраничный мануал?\r\n\r\nДискета и 2-страничное руководство могут на самом деле быть тем, что им нужно для решения их проблемы, и вполне будет стоить потратить 10 000 долларов на маленькое целевое решение как это. Маленькие целевые решения вызывают мало интереса у больших софтверных компаний. Концепция не масштабируется. Маленькие целевые решения без рекламного бюджета не интересуют рекламные газеты.\r\n\r\nТак что нет, я не думаю, что это нарочно PHP получает мало внимания прессы. PHP так же восхитителен, как и зубная щётка. Вы используете её каждый день, она делает работу, это простой инструмент, и что? Кто захочет читать о зубных щётках?\r\n\r\nSP: Уход от публичной лицензии* GNU** при переходе PHP от третьей к четвёртой версии вызвал суматоху среди сообщества Open Source. Чувствуете ли вы, что новая модель лицензирования сейчас принята и понята как наилучшее направление, которое PHP мог выбрать?\r\n\r\n* Общая Публичная Лицензия (General Public License, аббрев. GPL) — типовая лицензия на распространение программного обеспечения, представленная движением GNU. Широко используется для лицензирования свободно распространяемого ПО. Текст лицензии (прим. переводчика)\r\n\r\n** GNU — проект развития свободно распространяемой Unix-подобной операционной системы. Сайт проекта. (прим. переводчика)\r\n\r\nRL: PHP 3 на самом деле имел две лицензии. Поэтому мы на самом деле не перешли с GPL к чему-то ещё, а просто убрали часть GPL.\r\n\r\nЯ не вижу смысла в двойном лицензировании, и оно вызывает много путаницы. Постановкой PHP под лицензию, подобную той, под которой распространяется Apache, было разрешено многое из этой путаницы.\r\n\r\nДвойное лицензирование реально не работает, если дело касается меня — люди в любом случае будут использовать менее строгую из двух лицензий. Различные запреты, которые предлагает GPL, бессмысленны, если люди могут просто выбрать пользование под менее ограничивающей лицензии типа Apache. Поэтому имело смысл просто использовать менее ограничивающую из двух лицензий.\r\n\r\nЕсли вы посмотрите вокруг, нет особо значительных GPL-нутых языков сценариев. Под GPL-нутыми я имею в виду строго идущими лишь под GPL. Perl — двулицензионный с полностью неограничивающей художественной лицензией. Python имеет собственную лицензию. Ruby двулицензионный со своей лицензией. Tcl распространяется под лицензией BSD-типа. Не вижу, почему то, что PHP не распространяется под GPL, расстраивает кого-либо.\r\n\r\n...реально GPL не нужна. Для меня не проблема, если Майкрософт забросит ASP и полностью перейдёт на PHP. Безусловно, они могут принять и расширить его, но в таком случае мы будем с ними в чисто технической гонке. Это битва, которую мы можем выиграть, и, наконец, иметь PHP везде было бы классной штукой для PHP-сообщества.\r\n\r\nPHP сегодня\r\n\r\nSP: К чему бы вы приписали успех PHP? Чувствуете ли вы, что PHP имеет какое-либо особое слабое место (в сравнении с другими языками)?\r\n\r\nRL: Людям нравится PHP, потому что он решает их веб-задачи. А раз так, я не вижу какого-либо слабого места. Он делает работу, для которой был разработан.\r\n\r\nКое-кто может приводить довод, что определённые аспекты PHP не так развиты, как в других языках. Для примера — поддержка ООП. Но в конечном счёте оно мало нужно для решения задач веба, а скорее для эстетики и стремлении к чистоте языка.\r\n\r\nSP: Вы по-прежнему активно вовлечены в развитие PHP?\r\n\r\nЯ всё ещё достаточно вовлечён. Я не трачу 20 часов в день, как делал это в первую пару лет, но по-прежнему устраняю ошибки, спорю с другими разработчиками по поводу деталей и порой вскакиваю и вставляю лишний новый кусочек тут и там.\r\n\r\nSP: Какой веб-сервер лучше всех поддерживает PHP? Apache или какой-то ещё? И на какой платформе лучше всего работает PHP? Линукс/Интел, Солярис/SPARC или другая?\r\n\r\nRL: Полагаю, всё сводится к тому, какая получает наибольшее внимание. Большинство людей используют Линукс/Интел с Apache. Это значит, что ошибки на этой платформе находятся самими разработчиками быстро, и маловероятно, что конечный пользователь столкнётся с чем-то, с чем ещё не сталкивались разработчики. Другие платформы Юникс-мейнстрима, такие как Солярис/SPARC и FreeBSD/Интел с Apache так же находятся в их числе.\r\n\r\nSP: PHP обычно бывает спаренный с MySQL. Насколько много две команды сотрудничают в области разработок?\r\n\r\nRL: Мы знаем ребят из MySQL очень хорошо. Первый код для базы данных в PHP был написан для предшественника MySQL, который назывался mSQL. Интерфейс к MySQL, когда он появился, был полностью совместим с интерфейсом mSQL, так что с самых первых дней существования MySQL PHP хорошо поддерживал его. Эта пара работает потому что PHP и MySQL имеют обыкновение выбирать минималистический и очень прямой подход к решению проблем.\r\n\r\nС точки зрения сотрудничества на уровне разработки — такого в действительности немного. Но много и не требуется. PHP предоставляет тонкий слой, который просто выставляет интерфейс MySQL пользователю PHP. Мы поставляем вместе с PHP клиента MySQL, но эта библиотека полностью поддерживается командой разработчиков MySQL с небольшим участием нашей — кроме моментов когда они меняют структуру, конечно же.\r\n\r\nSP: Полагаете ли вы, что PHP становится заменой Perl?\r\n\r\nRL: Нет, Perl — это язык сценариев общего назначения. PHP особенно привязан к проблемам веба.\r\n\r\nSP: Какова ваша точка зрения на Magic Quotes* и Register Globals**?\r\n\r\n* Опция, включающая автоматическое добавление обратного слеша к кавычкам в данных, приходящих из форм и HTTP-запросов. В SQL-запросах текстовые строки выделяются кавычками. Чтобы вставить строку, содержащую в себе кавычки, их нужно выделить (\"эскейпить\") обратными слешами (\"\\\"). Это делается либо при помощи функции addslashes, либо автоматически при включенной опции Magic Quotes (прим. переводчика).\r\n\r\n** Данные из POST и GET запросов (и аналогично других типов источников) доступны в массивах $HTTP_POST_VARS, $HTTP_GET_VARS. Например, значение поля name из формы будет находиться в $HTTP_POST_VARS[\"name\"]. Опция Register Globals делает данные из этих запросов доступными по \"простым\" именам переменных. В данном примере — $name (прим. переводчика).\r\n\r\nRL: Register Globals — одна из особенностей, которая привела людей в PHP. Простота создания веб-приложений, когда форма и другие переменные были автоматически доступны не может быть побеждена.\r\n\r\nЛично я не был за выключение опции Register Globals по умолчанию. Это очень мало увеличивает общую безопасность приложения. Если люди не проверяют данные, приходящие от пользователя, тогда и без, и с включенными Registered Globals это приложение будет небезопасным.\r\n\r\nИметь отключенные Register Globals полезно только в одном случае — когда вы забываете инициализировать переменную до её использования, и кто-то, кто знает ваш код, использует это. Меняя уровень сообщений об ошибках, вы можете дать PHP найти эти случаи автоматически. В итоге, я думаю, всё, что сделало отключение Register Globals — это усложнило написание приложений на PHP.\r\n\r\nИ ещё это сделало нам 10-20 вопросов/сообщений об ошибках в день от пользователей, которых сбило с толку это изменение.\r\n\r\nMagic Quotes произошли в те дни, когда PHP использовался в основном исключительно для приложений, работающих на базах данных. Эти программы принимали данные из формы и вставляли их в базу. Даже сегодня куча скриптов на PHP делают чуть больше этого.\r\n\r\nВам всё время нужно эскейпить кавычки перед тем, как вставлять строку в базу данных. Если вы этого не делаете, вы получаете уродскую ошибку SQL, и ваша программа не работает. После объяснения этого простого факта людям в пятидесятый раз на дню я решил, что с меня хватит, и заставил PHP эксейпить строки на лету. Таким образом, программы будут работать, а худшее, что может произойти — это кто-то увидит лишний обратный слеш (\"\\\") на экране, когда они выводят данные напрямую вместо вставки их в базу.\r\n\r\nЧасто люди даже не замечают лишний \\, поскольку это не вызвало фатальных ошибок SQL, и поэтому меня не приводят в замешательство письма с вопросами, что же происходит. Это было очень здорово.\r\n\r\nДаже сегодня вы можете увидеть случайный сайт, где, очевидно, автор не осознавал, что данные нужно эскейпить перед вставкой в базу, и вы видите то тут, то там \\. Каждый из этих сайтов — это письмо на саппорт, на которое нам не нужно было отвечать.\r\n\r\nИнформированные люди, которым не нравится эта фича, могут отключить её сами и управляться со всеми кавычками самостоятельно. А информированные, которые хотят писать компактные программы, могут просто проверить настройки, используя get_magic_quotes_gpc() и добавить вызов addslashes(), где нужно.\r\n\r\nSP: Как вы полагаете, успешен ли баланс между коммерческим элементом и элементом открытого кода PHP?\r\n\r\nRL: Я думаю, оно работает нормально. Различные коммерческие объекты заставляют индивидов работать над частями PHP — а это выгодно всем.\r\n\r\n', 1, 1, '2022-03-10 14:52:26'),
(5, 1, 'Хороший стиль программирования', 'post5', 'Всякий кто сталкивается c PHP, в скором времени приходит к выводу, что это не совсем удобный язык для изучения. Дело в том, что он достаточно новый и динамично развивающийся, каждая последующая версия буквально перечёркивает предыдущую. В таких условиях имеющаяся документация быстро устаревает, а специалисты предпочитают не писать книг, так как информация размещённая в книге начинает устаревать до выхода книги в свет.\r\n\r\nПочему же PHP так популярен и каким образом столько человек разом обучилось PHP? Дело в том, что большинство PHP-программистов не изучало язык с нуля, а изучало его либо уже зная С/С++, либо Perl. Perl является C-подобным языком программирования (как и PHP), а является предшественником PHP, можно сказать что PHP это Web-ориентированный Perl. Поскольку, PHP просто логически следует из Perl и широкое распространение получил именно из-за того, что программистам было легко переходить с Perl на PHP (ну и с С на PHP, тоже).\r\n\r\nЗамечание\r\nЯзык Perl появился в 1986 году по воле системного программиста Лари Уолла. Созданный первоначально как средство обработки текстовых файлов, призванное облегчить жизнь системному администратору UNIX, он превратился в настоящий язык программирования. Традиционные области, в которых Perl применяется особенно часто и успешно, — создание приложений CGI, системное администрирование UNIX, обработка текста.\r\n\r\nКроме того, свой вклад вносит предметная область — программирование для сети Интернет. Для серьёзного понимания которого желательно знание очень многих вещей (HTML, SQL, UNIX, прикладных протоколов — хотя бы HTTP, стилей программирования на С, Perl, Java).\r\nКогда большинство PHP-программистов переходят в мир PHP с багажом другого языка программирования (их стиль уже устоялся), спрос на литературу, в которой бы обсуждались азы программирования не так велик. Новичкам бывает трудно найти информацию об организации кода. Мы надеемся, что эта статья поможет поставить свой собственный стиль, что в конечном итоге может увеличить скорость разработки на 30% и помочь при работе в команде, когда ваш код будет читаться другими программистами, а вам соответственно придётся читать чужой код.\r\nРасстановка фигурных скобок и отступы\r\nСуществует несколько стилей расстановки фигурных скобок, все они диктуются существующими стилями в других C-подобных языках программирования.\r\n\r\n1) Рациональный стиль\r\n\r\nЭто один из наиболее распространенных стилей, так как им пользовались Керниген (Kernighan) и Ричи (Ritchie), авторы языка C.\r\n\r\n<?php\r\n  if($flag){\r\n    echo \"Hello world!\";\r\n  }\r\n?>\r\n\r\nПреимущество этого подхода заключается в экономии вертикального пространства, жизненно важного при отладке большого блока кода. Оборотной стороной такого подхода является то, что может оказаться трудным найти символ {, спрятанный в конце строки. Этого стиля придерживаются и Java-программисты, как-то приписывает Sun.\r\n\r\n2) Стиль Алмена\r\n\r\nЭрик Алемен (Eric Allman) написал утилиты BSD в этом стиле, поэтому этот стиль часто называют \"стиль BSD\":\r\n\r\n<?php\r\n  if($flag)\r\n  {\r\n    echo \"Hello world!\";\r\n  }\r\n?>\r\n\r\nАргументом в поддержку такого стиля является тот факт, что область видимости блочного оператора ясна и визуально ассоциируется с управляющим оператором.\r\n\r\n3) Стиль Whitesmith\r\n\r\nДанный стиль предписывает использование следующей расстановки фигурных скобок\r\n\r\n<?php\r\n  if($flag)\r\n    {\r\n    echo \"Hello world!\";\r\n    }\r\n?>\r\n\r\nЭтот стиль имеет преимущество в том, что скобки более тесно ассоциируются с кодом, который они включают и разграничивают, однако при визуальном просмотре текста отыскать скобки оказывается чуть более сложно.\r\n\r\n4) Стиль GNU\r\n\r\nПрограммисты GNU фонда Free Software Foundation используют следующий стиль расстановки фигурных скобок\r\n\r\n<?php\r\n  if($flag)\r\n    {\r\n      echo \"Hello world!\";\r\n    }\r\n?>\r\n\r\nВнутри любых управляющих конструкций операторы следует располагать с отступом на одинаковое число пробелов, например для операторов if-then-else код должен выглядеть следующим образом:\r\n\r\n<?php\r\n  $flag = true;\r\n  if($flag)\r\n  {\r\n    echo \"Переменная равна true\";\r\n    exit();\r\n  }\r\n  else\r\n  {\r\n    echo \"Переменная равна false\";\r\n    exit();\r\n  }\r\n?>\r\n\r\nЧисло может быть любым, обычно используют 2, 4 или 8 пробелов. Старайтесь придерживаться этого правила, некоторые программисты приходят в бешенство когда это число не кратно 2 :) Наиболее оптимальным является использование 2 пробелов, так как при их большем числе вложенные блоки становятся \"растянутыми\" и их становится сложно воспринимать.\r\n\r\nПробелы вокруг символов\r\nБинарные операторы следует обрамлять пробелами:\r\n\r\n<?php\r\n  // Неправильно\r\n  $a=$b+$c*$d;\r\n  // Правильно\r\n  $a = $b + $c * $d;\r\n?>\r\n\r\nСимвол пробела ассоциируется с новым словом, поэтому формула читается не как непонятный набор символов, а как нечто осмысленное.\r\n\r\nКомментарии\r\nРасставляйте комментарии по принципу “чем больше, тем лучше” — пройдёт некоторое время и вы забудете, что делал тот или иной программный блок. Вообще принято комментировать код на английском языке или не комментировать вообще, так как в русском дикое количество кодировок, да и вообще так исторически сложилось. Плюйте на это, код вы комментируете в первую очередь для себя, а не для других! А раз уж вы делает это для себя делайте это в удобной для вас кодировке.\r\n\r\nPHP собрал в себе практически все комментарии современных языков программирования, наряду с однострочными комментариями в стиле shell-скриптов (#)\r\n\r\n<?php\r\n  # Программный модуль index.php\r\n  echo \"Hello world!\";\r\n?>\r\n\r\nи С++ (//)\r\n\r\n<?php\r\n  // Программный модуль index.php\r\n  echo \"Hello world!\";\r\n?>\r\n\r\nможно использовать многострочный комментарий в стиле C:\r\n\r\n<?php\r\n  /* Это многострочный комментарий в стиле С\r\n     он охватывает несколько строк – не допускается\r\n     вложенных комментариев\r\n  */\r\n  echo \"Hello world!\";\r\n?>\r\n\r\nК хорошему тону относится использование однострочных комментариев для короткого комментария, а многострочного — для комментария, охватывающего несколько строк. Не возбраняется использовать однострочные комментарии для большого текста, особенно в начале файла или важного блока кода\r\n\r\n<?php\r\n  ////////////////////////////////////////////////////////////////////////////////////////\r\n  // Гостевая книга\r\n  ///////////////////////////////////////////////////////////////////////////////////////\r\n?>\r\n\r\nКак и при работе с отступами и фигурными скобками, основным требованием является необходимость придерживаться одного стиля во всех программных блоках.\r\nПри расстановке однострочных комментариев возможно два варианта: непосредственно перед выполняемым оператором\r\n\r\n<?php\r\n  // Вывод текстовой строки в окно браузера\r\n  echo \"Hello world!\";\r\n?>\r\n\r\nи после точки с запятой\r\n\r\n<?php\r\n    echo \"Hello world!\"; // Вывод текстовой строки в окно браузера\r\n?>\r\n\r\nЛучше придерживаться первого правила, так как строка получается длинной и плохо воспринимается читающим. Единственным оправданием использования такого комментария является комментирование закрывающейся скобки длинного программного блока, содержащего много вложенных блоков.\r\n\r\n<?php\r\n  if($tot)\r\n  {\r\n     while($position = next($tot))\r\n     {\r\n        /* Очень длинный код\r\n           содержащий много\r\n           вложенных блоков\r\n           ...\r\n        */\r\n        if($flag)\r\n        {\r\n          echo \"Ошибка\";\r\n          exit();\r\n        }\r\n     } // Конец while($position = next($tot))\r\n  }\r\n?>\r\n\r\nИмена переменных и функций\r\nСуществует несколько стилей названия переменных\r\n\r\n$var_bell — стиль C: нижний регистр, знак подчёркивания.\r\n\r\n$VarBell — стиль Pascal: каждая подстрока в названии начинается с большой буквы.\r\n\r\n$varBell — стиль Java: первая строка начинается с маленькой буквы, все последующие с большой.\r\n\r\nНе имеет значения, какой стиль будет вами выбран — главное придерживаться в коде одного стиля.\r\n\r\nЗамечание\r\nВ программировании константы традиционно записываются в верхнем регистре YANDEX_BOT. Если вы хотите, чтобы другие программисты могли легко воспринимать ваш код, придерживайтесь этого правила.\r\nПри названии переменных и функций старайтесь давать им осмысленные имена. Иногда ничего не приходит в голову, и появляется назвать переменную как попало — остерегайтесь этого. В своё время было потрачено не мало часов из-за неудачно названных переменных, иногда отладить код удавалось лишь в том случае, если переменные были переименованы подобающим образом.\r\n\r\nРассмотрим несколько примеров. Часто временные строки для хранения SQL называют $query (запрос) — это очень удачное название, ассоциирующееся именно с SQL-запросом. Обычно на этом всё и заканчивается. При появлении второго запроса, вторая переменная получает имя $query1 — это порочная практика. Обычно запросы в рамках одного скрипта отличаются своим действием: один SQL-запрос может выполнять обновление (UPDATE), другой выборку (SELECT), поэтому переменные лучше называть с указанием действия оператора: $query_update и $query_select, соответственно.\r\n\r\nЧасто можно увидеть код\r\n\r\n<?php\r\n  $query = \"SELECT * FROM catalog\";\r\n  $query1 = mysql_query($query);\r\n  while($result = mysql_fetch_array($query1))\r\n  {\r\n     /* Код обработки */\r\n  }\r\n?>\r\n\r\nЗдесь дескриптор запроса, возвращаемый функцией mysql_query() назван $query1, это здорово запутывает как разработчика, так и читающего текст программы. Дескриптор не несёт физического смысла — это лишь ключ к результату, поэтому его лучше называть сокращённым именем таблицы\r\n\r\n<?php\r\n  $query = \"SELECT * FROM catalog\";\r\n  $cat = mysql_query($query);\r\n  while($catalog = mysql_fetch_array($cat))\r\n  {\r\n     /* Код обработки */\r\n  }\r\n?>', 1, 1, '2022-03-10 14:57:04');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `authors`
--
ALTER TABLE `authors`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `category_id` (`category_id`),
  ADD KEY `autor_id` (`autor_id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `authors`
--
ALTER TABLE `authors`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT для таблицы `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT для таблицы `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `posts`
--
ALTER TABLE `posts`
  ADD CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`),
  ADD CONSTRAINT `posts_ibfk_2` FOREIGN KEY (`autor_id`) REFERENCES `authors` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
